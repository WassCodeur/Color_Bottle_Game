/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SchoolManager {
  export type CourseStruct = {
    courseName: string;
    staffId: BigNumberish;
    courseId: BigNumberish;
    courseDuration: BigNumberish;
    courseStartDate: BigNumberish;
    courseEndDate: BigNumberish;
  };

  export type CourseStructOutput = [
    courseName: string,
    staffId: bigint,
    courseId: bigint,
    courseDuration: bigint,
    courseStartDate: bigint,
    courseEndDate: bigint
  ] & {
    courseName: string;
    staffId: bigint;
    courseId: bigint;
    courseDuration: bigint;
    courseStartDate: bigint;
    courseEndDate: bigint;
  };

  export type StaffStruct = {
    staffName: string;
    _gender: BigNumberish;
    staffRole: string;
    staffId: BigNumberish;
    salary: BigNumberish;
    joiningDate: BigNumberish;
  };

  export type StaffStructOutput = [
    staffName: string,
    _gender: bigint,
    staffRole: string,
    staffId: bigint,
    salary: bigint,
    joiningDate: bigint
  ] & {
    staffName: string;
    _gender: bigint;
    staffRole: string;
    staffId: bigint;
    salary: bigint;
    joiningDate: bigint;
  };

  export type StudentStruct = {
    studentName: string;
    _gender: BigNumberish;
    age: BigNumberish;
    studentId: BigNumberish;
    hasPaidSchoolFee: boolean;
    registrationDate: BigNumberish;
  };

  export type StudentStructOutput = [
    studentName: string,
    _gender: bigint,
    age: bigint,
    studentId: bigint,
    hasPaidSchoolFee: boolean,
    registrationDate: bigint
  ] & {
    studentName: string;
    _gender: bigint;
    age: bigint;
    studentId: bigint;
    hasPaidSchoolFee: boolean;
    registrationDate: bigint;
  };

  export type StudentMarksStruct = {
    studentId: BigNumberish;
    courseId: BigNumberish;
    staffId: BigNumberish;
    marks: BigNumberish;
  };

  export type StudentMarksStructOutput = [
    studentId: bigint,
    courseId: bigint,
    staffId: bigint,
    marks: bigint
  ] & { studentId: bigint; courseId: bigint; staffId: bigint; marks: bigint };
}

export interface SchoolManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "RemoveStaff"
      | "RemoveStudent"
      | "SCHOOL_FEES"
      | "addCourse"
      | "admin"
      | "courseCount"
      | "courses"
      | "getCourse"
      | "getStaff"
      | "getStudent"
      | "getStudentCount"
      | "getStudentMarks"
      | "markStudent"
      | "paySchoolFee"
      | "payStaffSalary"
      | "payementCount"
      | "payements"
      | "registerStaff"
      | "registerStudent"
      | "removeCourse"
      | "staffCount"
      | "staffs"
      | "studentCount"
      | "students"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Marked" | "Payed" | "Registred" | "Removed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "RemoveStaff",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "RemoveStudent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "SCHOOL_FEES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addCourse",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "courseCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "courses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCourse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStaff",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStudent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStudentCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStudentMarks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "markStudent",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "paySchoolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payStaffSalary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payementCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payements",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerStaff",
    values: [AddressLike, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerStudent",
    values: [AddressLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCourse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "staffCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "staffs", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "studentCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "students",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "RemoveStaff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RemoveStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SCHOOL_FEES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addCourse", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "courseCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "courses", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCourse", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStaff", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStudent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStudentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStudentMarks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paySchoolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payStaffSalary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payementCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payements", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerStaff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCourse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "staffCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staffs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "studentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "students", data: BytesLike): Result;
}

export namespace MarkedEvent {
  export type InputTuple = [
    studentAddress: AddressLike,
    courseId: BigNumberish,
    markedAt: BigNumberish
  ];
  export type OutputTuple = [
    studentAddress: string,
    courseId: bigint,
    markedAt: bigint
  ];
  export interface OutputObject {
    studentAddress: string;
    courseId: bigint;
    markedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PayedEvent {
  export type InputTuple = [
    studentName: string,
    itemId: BigNumberish,
    payementDate: BigNumberish
  ];
  export type OutputTuple = [
    studentName: string,
    itemId: bigint,
    payementDate: bigint
  ];
  export interface OutputObject {
    studentName: string;
    itemId: bigint;
    payementDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegistredEvent {
  export type InputTuple = [
    _name: string,
    itemId: BigNumberish,
    _RegistrationDate: BigNumberish
  ];
  export type OutputTuple = [
    _name: string,
    itemId: bigint,
    _RegistrationDate: bigint
  ];
  export interface OutputObject {
    _name: string;
    itemId: bigint;
    _RegistrationDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemovedEvent {
  export type InputTuple = [
    _name: string,
    itemId: BigNumberish,
    removedAt: BigNumberish
  ];
  export type OutputTuple = [_name: string, itemId: bigint, removedAt: bigint];
  export interface OutputObject {
    _name: string;
    itemId: bigint;
    removedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SchoolManager extends BaseContract {
  connect(runner?: ContractRunner | null): SchoolManager;
  waitForDeployment(): Promise<this>;

  interface: SchoolManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  RemoveStaff: TypedContractMethod<
    [staffAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  RemoveStudent: TypedContractMethod<
    [studentAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  SCHOOL_FEES: TypedContractMethod<[], [bigint], "view">;

  addCourse: TypedContractMethod<
    [
      courseName: string,
      staffId: BigNumberish,
      courseDuration: BigNumberish,
      courseStartDate: BigNumberish,
      courseEndDate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  courseCount: TypedContractMethod<[], [bigint], "view">;

  courses: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint] & {
        courseName: string;
        staffId: bigint;
        courseId: bigint;
        courseDuration: bigint;
        courseStartDate: bigint;
        courseEndDate: bigint;
      }
    ],
    "view"
  >;

  getCourse: TypedContractMethod<
    [courseId: BigNumberish],
    [SchoolManager.CourseStructOutput],
    "view"
  >;

  getStaff: TypedContractMethod<
    [staffAddr: AddressLike],
    [SchoolManager.StaffStructOutput],
    "view"
  >;

  getStudent: TypedContractMethod<
    [studentAddr: AddressLike],
    [SchoolManager.StudentStructOutput],
    "view"
  >;

  getStudentCount: TypedContractMethod<[], [bigint], "view">;

  getStudentMarks: TypedContractMethod<
    [],
    [SchoolManager.StudentMarksStructOutput],
    "view"
  >;

  markStudent: TypedContractMethod<
    [studentAddr: AddressLike, courseId: BigNumberish, marks: BigNumberish],
    [void],
    "nonpayable"
  >;

  paySchoolFee: TypedContractMethod<[amount: BigNumberish], [void], "payable">;

  payStaffSalary: TypedContractMethod<
    [staffAddr: AddressLike],
    [void],
    "payable"
  >;

  payementCount: TypedContractMethod<[], [bigint], "view">;

  payements: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, string, bigint] & {
        payementId: bigint;
        accountId: bigint;
        amount: bigint;
        reason: string;
        payementDate: bigint;
      }
    ],
    "view"
  >;

  registerStaff: TypedContractMethod<
    [
      staffAddr: AddressLike,
      courseName: string,
      slary: BigNumberish,
      _gender: BigNumberish,
      staffRole: string
    ],
    [void],
    "nonpayable"
  >;

  registerStudent: TypedContractMethod<
    [
      studentAddr: AddressLike,
      studentName: string,
      _gender: BigNumberish,
      age: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  removeCourse: TypedContractMethod<
    [courseId: BigNumberish],
    [void],
    "nonpayable"
  >;

  staffCount: TypedContractMethod<[], [bigint], "view">;

  staffs: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, string, bigint, bigint, bigint] & {
        staffName: string;
        _gender: bigint;
        staffRole: string;
        staffId: bigint;
        salary: bigint;
        joiningDate: bigint;
      }
    ],
    "view"
  >;

  studentCount: TypedContractMethod<[], [bigint], "view">;

  students: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, boolean, bigint] & {
        studentName: string;
        _gender: bigint;
        age: bigint;
        studentId: bigint;
        hasPaidSchoolFee: boolean;
        registrationDate: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "RemoveStaff"
  ): TypedContractMethod<[staffAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "RemoveStudent"
  ): TypedContractMethod<[studentAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "SCHOOL_FEES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addCourse"
  ): TypedContractMethod<
    [
      courseName: string,
      staffId: BigNumberish,
      courseDuration: BigNumberish,
      courseStartDate: BigNumberish,
      courseEndDate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "courseCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "courses"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint] & {
        courseName: string;
        staffId: bigint;
        courseId: bigint;
        courseDuration: bigint;
        courseStartDate: bigint;
        courseEndDate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCourse"
  ): TypedContractMethod<
    [courseId: BigNumberish],
    [SchoolManager.CourseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStaff"
  ): TypedContractMethod<
    [staffAddr: AddressLike],
    [SchoolManager.StaffStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStudent"
  ): TypedContractMethod<
    [studentAddr: AddressLike],
    [SchoolManager.StudentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStudentCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStudentMarks"
  ): TypedContractMethod<[], [SchoolManager.StudentMarksStructOutput], "view">;
  getFunction(
    nameOrSignature: "markStudent"
  ): TypedContractMethod<
    [studentAddr: AddressLike, courseId: BigNumberish, marks: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "paySchoolFee"
  ): TypedContractMethod<[amount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "payStaffSalary"
  ): TypedContractMethod<[staffAddr: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "payementCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "payements"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, string, bigint] & {
        payementId: bigint;
        accountId: bigint;
        amount: bigint;
        reason: string;
        payementDate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerStaff"
  ): TypedContractMethod<
    [
      staffAddr: AddressLike,
      courseName: string,
      slary: BigNumberish,
      _gender: BigNumberish,
      staffRole: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerStudent"
  ): TypedContractMethod<
    [
      studentAddr: AddressLike,
      studentName: string,
      _gender: BigNumberish,
      age: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeCourse"
  ): TypedContractMethod<[courseId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "staffCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "staffs"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, string, bigint, bigint, bigint] & {
        staffName: string;
        _gender: bigint;
        staffRole: string;
        staffId: bigint;
        salary: bigint;
        joiningDate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "studentCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "students"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, boolean, bigint] & {
        studentName: string;
        _gender: bigint;
        age: bigint;
        studentId: bigint;
        hasPaidSchoolFee: boolean;
        registrationDate: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "Marked"
  ): TypedContractEvent<
    MarkedEvent.InputTuple,
    MarkedEvent.OutputTuple,
    MarkedEvent.OutputObject
  >;
  getEvent(
    key: "Payed"
  ): TypedContractEvent<
    PayedEvent.InputTuple,
    PayedEvent.OutputTuple,
    PayedEvent.OutputObject
  >;
  getEvent(
    key: "Registred"
  ): TypedContractEvent<
    RegistredEvent.InputTuple,
    RegistredEvent.OutputTuple,
    RegistredEvent.OutputObject
  >;
  getEvent(
    key: "Removed"
  ): TypedContractEvent<
    RemovedEvent.InputTuple,
    RemovedEvent.OutputTuple,
    RemovedEvent.OutputObject
  >;

  filters: {
    "Marked(address,uint256,uint256)": TypedContractEvent<
      MarkedEvent.InputTuple,
      MarkedEvent.OutputTuple,
      MarkedEvent.OutputObject
    >;
    Marked: TypedContractEvent<
      MarkedEvent.InputTuple,
      MarkedEvent.OutputTuple,
      MarkedEvent.OutputObject
    >;

    "Payed(string,uint256,uint256)": TypedContractEvent<
      PayedEvent.InputTuple,
      PayedEvent.OutputTuple,
      PayedEvent.OutputObject
    >;
    Payed: TypedContractEvent<
      PayedEvent.InputTuple,
      PayedEvent.OutputTuple,
      PayedEvent.OutputObject
    >;

    "Registred(string,uint256,uint256)": TypedContractEvent<
      RegistredEvent.InputTuple,
      RegistredEvent.OutputTuple,
      RegistredEvent.OutputObject
    >;
    Registred: TypedContractEvent<
      RegistredEvent.InputTuple,
      RegistredEvent.OutputTuple,
      RegistredEvent.OutputObject
    >;

    "Removed(string,uint256,uint256)": TypedContractEvent<
      RemovedEvent.InputTuple,
      RemovedEvent.OutputTuple,
      RemovedEvent.OutputObject
    >;
    Removed: TypedContractEvent<
      RemovedEvent.InputTuple,
      RemovedEvent.OutputTuple,
      RemovedEvent.OutputObject
    >;
  };
}
