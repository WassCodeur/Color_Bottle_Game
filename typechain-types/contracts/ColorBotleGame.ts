/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ColorBotleGameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_ATTEMPTS"
      | "MAX_COLORS"
      | "attempts"
      | "generateColors"
      | "generateRandomNumber"
      | "play"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Winned"): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_ATTEMPTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_COLORS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "attempts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "generateColors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateRandomNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "play",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_ATTEMPTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_COLORS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "attempts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateColors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "play", data: BytesLike): Result;
}

export namespace WinnedEvent {
  export type InputTuple = [message: string];
  export type OutputTuple = [message: string];
  export interface OutputObject {
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ColorBotleGame extends BaseContract {
  connect(runner?: ContractRunner | null): ColorBotleGame;
  waitForDeployment(): Promise<this>;

  interface: ColorBotleGameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_ATTEMPTS: TypedContractMethod<[], [bigint], "view">;

  MAX_COLORS: TypedContractMethod<[], [bigint], "view">;

  attempts: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  generateColors: TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;

  generateRandomNumber: TypedContractMethod<[], [bigint], "view">;

  play: TypedContractMethod<[_colors: BigNumberish[]], [bigint], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_ATTEMPTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_COLORS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "attempts"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "generateColors"
  ): TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "generateRandomNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "play"
  ): TypedContractMethod<[_colors: BigNumberish[]], [bigint], "nonpayable">;

  getEvent(
    key: "Winned"
  ): TypedContractEvent<
    WinnedEvent.InputTuple,
    WinnedEvent.OutputTuple,
    WinnedEvent.OutputObject
  >;

  filters: {
    "Winned(string)": TypedContractEvent<
      WinnedEvent.InputTuple,
      WinnedEvent.OutputTuple,
      WinnedEvent.OutputObject
    >;
    Winned: TypedContractEvent<
      WinnedEvent.InputTuple,
      WinnedEvent.OutputTuple,
      WinnedEvent.OutputObject
    >;
  };
}
