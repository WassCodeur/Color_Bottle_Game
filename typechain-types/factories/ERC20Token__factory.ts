/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { ERC20Token, ERC20TokenInterface } from "../ERC20Token";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Approved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Transfered",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "Allowaance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "TotalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "_owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506108b28061005f6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a44b47f71161005b578063a44b47f7146100ea578063b2bdfa7b14610108578063bc12f8ea14610126578063c0d84ce5146101565761007d565b806369ca02dd1461008257806370a082311461009e57806390ec57f1146100ce575b600080fd5b61009c600480360381019061009791906105df565b610172565b005b6100b860048036038101906100b3919061061f565b6102a6565b6040516100c5919061065b565b60405180910390f35b6100e860048036038101906100e391906105df565b6102c7565b005b6100f2610372565b6040516100ff919061065b565b60405180910390f35b61011061037d565b60405161011d9190610685565b60405180910390f35b610140600480360381019061013b91906106a0565b6103a1565b60405161014d919061065b565b60405180910390f35b610170600480360381019061016b91906106e0565b610431565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610200576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f790610790565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610246573d6000803e3d6000fd5b507f8930ac7bcb101f94c05b13845098ae74383bfb9e348e73061b730040945cbb8260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838360405161029a939291906107b0565b60405180910390a15050565b60008173ffffffffffffffffffffffffffffffffffffffff16319050919050565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610335576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032c90610833565b60405180910390fd5b7ff13bfe0b6ec5df39265dccb0a01a09aa4162489c7a083dc6670bde0255d02ca78282604051610366929190610853565b60405180910390a15050565b6000620f4240905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610411576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040890610833565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1631905092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b690610790565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610505573d6000803e3d6000fd5b507f8930ac7bcb101f94c05b13845098ae74383bfb9e348e73061b730040945cbb82838383604051610539939291906107b0565b60405180910390a1505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105768261054b565b9050919050565b6105868161056b565b811461059157600080fd5b50565b6000813590506105a38161057d565b92915050565b6000819050919050565b6105bc816105a9565b81146105c757600080fd5b50565b6000813590506105d9816105b3565b92915050565b600080604083850312156105f6576105f5610546565b5b600061060485828601610594565b9250506020610615858286016105ca565b9150509250929050565b60006020828403121561063557610634610546565b5b600061064384828501610594565b91505092915050565b610655816105a9565b82525050565b6000602082019050610670600083018461064c565b92915050565b61067f8161056b565b82525050565b600060208201905061069a6000830184610676565b92915050565b600080604083850312156106b7576106b6610546565b5b60006106c585828601610594565b92505060206106d685828601610594565b9150509250929050565b6000806000606084860312156106f9576106f8610546565b5b600061070786828701610594565b935050602061071886828701610594565b9250506040610729868287016105ca565b9150509250925092565b600082825260208201905092915050565b7f596f7520617265206e6f7420746865206f776e65720000000000000000000000600082015250565b600061077a601583610733565b915061078582610744565b602082019050919050565b600060208201905081810360008301526107a98161076d565b9050919050565b60006060820190506107c56000830186610676565b6107d26020830185610676565b6107df604083018461064c565b949350505050565b7f596f7520617265206e6f7420746865207370656e646572000000000000000000600082015250565b600061081d601783610733565b9150610828826107e7565b602082019050919050565b6000602082019050818103600083015261084c81610810565b9050919050565b60006040820190506108686000830185610676565b610875602083018461064c565b939250505056fea26469706673582212204138c026f3cdd7210f5b69ea844b00289b2065c0d46f6c78617cca0af4d3256764736f6c634300081c0033";

type ERC20TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Token__factory extends ContractFactory {
  constructor(...args: ERC20TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ERC20Token & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERC20Token__factory {
    return super.connect(runner) as ERC20Token__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20TokenInterface {
    return new Interface(_abi) as ERC20TokenInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ERC20Token {
    return new Contract(address, _abi, runner) as unknown as ERC20Token;
  }
}
